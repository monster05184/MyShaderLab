// Generated by Shader Monkey, do NOT modify it manually!!!
Shader "S_Game_HeroShow/[NPR]/NPRStandard_Transmission_Matcap"
{
    Properties
    {
        // ---- Begin build-in properties
        [Enum(UnityEngine.Rendering.CullMode)] _Cull("Cull Mode", Float) = 2
        [SimpleToggle] _ZWrite("ZWrite", Float) = 1
        [Enum(UnityEngine.Rendering.CompareFunction)] _ZTestMode("ZTest", Float) = 4
        [SimpleToggle] _SpOpacity("透明是否保留高光", int) = 0
        [Enum(UnityEngine.Rendering.YABlendMode)] _BlendMode("Blend Mode", Float) = 0
        [Enum(UnityEngine.Rendering.BlendMode)] _SrcBlend("SrcBlend", Float) = 1
        [Enum(UnityEngine.Rendering.BlendMode)] _DstBlend("DstBlend", Float) = 0
        [Toggle] _AlphaTest("Alpha Test", Float) = 0
        [Toggle] _Visibility("Use Visibility", Float) = 0
        _OcclusionScale("Occlusion Scale", Range(0, 1)) = 1
        _GIBakerMode("GIBakerMode", Int) = 10
        [IntRange] _StencilRef("Stencil Ref$Group#Stencil$", Range(0, 255)) = 0
        [Enum(UnityEngine.Rendering.CompareFunction)] _StencilComp("Stencil Comp$Group#Stencil$", Float) = 8
        [IntRange] _StencilReadMask("Stencil Read Mask$Group#Stencil$", Range(0, 255)) = 255
        [IntRange] _StencilWriteMask("Stencil Write Mask$Group#Stencil$", Range(0, 255)) = 255
        [Enum(UnityEngine.Rendering.StencilOp)] _StencilPass("Stencil Pass$Group#Stencil$", Float) = 0
        [Enum(UnityEngine.Rendering.StencilOp)] _StencilFail("Stencil Fail$Group#Stencil$", Float) = 0
        [Enum(UnityEngine.Rendering.StencilOp)] _StencilZFail("Stencil ZFail$Group#Stencil$", Float) = 0
        // ---- End build-in properties
        // ---- Begin material properties (NPRStandard_Transmission.cginc)
        [Toggle] _Anisotropy("Anisotropy", Int) = 0
        [Header(Diffuse)] [HDR] _SelfGI("Self GI COLOR", Color) = (0.9, 0.5, 0.2, 1)
        _AlphaAll("Alpha All", Range (0, 1)) = 1.0
        _AlbedoMap("Albedo Map (RGB,A)", 2D) = "white" {}
        _AlbedoColor("Albedo COLOR", Color) = (0.1, 0.1, 0.1, 1)
        _MaterialParamsMap("R=roughness, G=metallic,B=AO,A=colormask", 2D) = "white"{}
        _NormalMap("Normal Map", 2D) = "bump" {}
        [HDR] _EmissiveColor("Emissive COLOR", Color) = (1.0, 1.0, 1.0, 1)
        _EmissiveMap("Emissive Map (RGB)", 2D) = "black" {}
        _MetallicMultiplier("Metallic multiplier (DEBUG Only)", Range (0, 1)) = 1.0
        _RoughnessMultiplier("Roughness multiplier (DEBUG Only)", Range (0, 1)) = 1.0
        _ShadowStrength("Shadow Strength", Range (0, 1)) = 1.0
        

        
        
        
        _EnvMap("折射图$Group#折射$", Cube) = "" {}
        [HDR] _EnvColor("折射颜色$Group#折射$", Color) = (0.5, 0.5, 0.5, 1)
        _TransColor("透射率$Group#折射$", Color) = (0.6, 0.6, 0.6, 1)
        _ETA("折射率（入射/出射）$Group#折射$", Range (0.1, 1)) = 0.75
        _NormalFlatten("投射法线平整度$Group#折射$", Range (0, 1)) = 0.7
        _MotionSpeed("折射变化速度$Group#折射$", Range (0, 100)) = 1.0
        _ThicknessMap("厚度纹理$Group#折射$", 2D) = "gray" {}
        [Toggle] [AutoVariant(multi_compile)] _EnableDissolve("Enable Dissolve$Group#溶解$", Float) = 0
        _DissolveTex("Dissolve(RGB)$Group#溶解$", 2D) = "white" {}
        _DissolveTexUVR("UV-R$Group#溶解$", Vector) = (1, 1, 0, 0)
        _DissolveTexUVG("UV-B$Group#溶解$", Vector) = (1, 1, 0, 0)
        _DissolveLV("强度:x=R,y=B,z=Fresnel,w=溶解随机闪烁$Group#溶解$", Vector) = (0, 0, 0, 0)
        _DissolveEdgeColor("颜色$Group#溶解$", Vector) = (0.2, 0.5, 1, 1)
        _DissolveEdgeColor2("颜色2$Group#溶解$", Vector) = (0, 0, 0, 0.5)
        _Dissolve("_Dissolve$Group#溶解$", Range (-1, 1)) = 0.0
        _DissolveON("0=透明ON 1=透明OFF$Group#溶解$", Range (0, 1)) = 0.0
        _EdgeWidth("边缘宽度$Group#溶解$", Range (-0.5, 0.5)) = 0.1
        [KeywordEnum(None, World, View)] [AutoVariant(shader_feature)] _RimSpaceMode("空间模式$Group#边缘光$", Float) = 0
        _LightPos("光源位置$Group#边缘光$$Depend#_RimSpaceMode#1#Hide$", Vector) = (0, 1, 0, 0)
        _LightDir("光源方向$Group#边缘光$$Depend#_RimSpaceMode#2#Hide$", Vector) = (0, 1, 0, 0)
        [HDR] _RimLightColor("边缘光颜色$Group#边缘光$", Color) = (1, 1, 1, 0)
        _RimLightSmooth("柔和度$Group#边缘光$", Range (0, 1)) = 0.5
        _RumLightMaskTex("遮罩图$Group#边缘光$", 2D) = "white"{}
        // ---- End material properties (NPRStandard_Transmission.cginc)
        
        //RefractMatcap
        _RefractionMap_MatCap("折射Matcap$Group#折射$", 2D) = "black" {}
        _Scale_Refraction("Matcap折射强度(当Matcap折射开启)$Group#折射$", Range (0, 1)) = 0.0553
        [HDR]_MatcapRefractionColor("Matcap折射颜色$Group#折射$", Color) = (0.333, 0.526, 0.688, 1)
        
        //DetailNormal
        _DetailNormalMap("细节法线纹理$Group#细节法线$", 2D) = "bump" {}
        _DetailNormalScale("细节法线强度$Group#细节法线$", Range (0, 1)) = 0.5
        
        //BackDetailNormal
        _BackDetailNormalMapScale("背面细节法线缩放$Group#细节法线$", Range(0, 2)) = 0.5
                //NormalRemap
        _NormalRemapStrength("法线重映射强度$Group#细节法线$", Range(0.1, 2)) = 0.5
        

        
        //Matcap
        [HDR]_SpColor("高光颜色 $Group#光照$", Color) = (1.0,1.0,1.0,1.0)
		[NoScaleOffset]_CapTex ("高光 Matcup  $Group#光照$", 2D) = "white" {}
        
        //Fenier
        _F0("F0(菲涅尔强度控制) $Group#菲尼尔$", Range(0, 1)) = 0.048//水晶的F0
        
        //EnvMap
        _MatcapEnvMap("环境图$Group#光照$", 2D) = "" {}
        _MatcapEnvColor("环境颜色$Group#光照$", Color) = (0.5, 0.5, 0.5, 1)
        
        _ParallaxHeight("视差高度$Group#视差$", Float) = 0.1
        _ParallaxMap("视差纹理$Group#视差$", 2D) = "white" {}
        _ParallaxColor("视差颜色$Group#视差$", Color) = (1.0, 1.0, 1.0, 1.0)
        _ParallaxRange("视差范围$Group#视差$", Range(0.1, 1)) = 0.3
        

        
    }

    HLSLINCLUDE

    #pragma exclude_renderers d3d9 d3d11_9x
    //#pragma enable_d3d11_debug_symbols
    #pragma target 2.5

    // ---- Begin build-in defines
    #define CONF_SHADER_PROFILE SHADERPROFILE_JUWAI
    #define CONF_SHADING_MODEL SHADINGMODEL_CUSTOM

    #define YA_SURFACE_SHADER_V2 1
    #define VERTEX_INPUT_COLOR 1
    #define VERTEX_INPUT_TEXCOORD0 1
    #define VERTEX_INPUT_TEXCOORD1 1
    #if _VISIBILITY_ON
        #ifndef VERTEX_INPUT_TEXCOORD2
            #define VERTEX_INPUT_TEXCOORD2 1
        #endif
    #endif

    ENDHLSL

    // ---- Begin SubShader Standard
    SubShader
    {
        Tags
        {
            "RenderType" = "Opaque"
        }

        // ---- Begin common state
        LOD 100
        // ---- End common state

        Pass
        {
            name "META"
            Tags
            {
                "LightMode" = "Meta"
            }

            Cull [_Cull]
            Blend [_SrcBlend] [_DstBlend]

            HLSLPROGRAM

            #pragma vertex VertMeta
            #pragma fragment FragMeta

            #pragma only_renderers d3d11

            // ---- Begin build-in variants
            #pragma shader_feature __ _ALPHATEST_ON
            #pragma shader_feature __ _VISIBILITY_ON
            // ---- End build-in variants
            // ---- Begin material variants (NPRStandard_Transmission.cginc)
            #pragma multi_compile __ _ENABLEDISSOLVE_ON
            #pragma shader_feature _RIMSPACEMODE_NONE _RIMSPACEMODE_WORLD _RIMSPACEMODE_VIEW
            // ---- End material variants (NPRStandard_Transmission.cginc)

            // ---- Begin build-in properties
            half _Cull;
            static half _ZWrite = 0;
            static half _ZTestMode = 0;
            static half _ColorMask = 0;
            static half _AlphaToMask = 0;
            half _OcclusionScale;
            int _GIBakerMode;

            #define DECL_CULL 1
            #define DECL_ZWRITE 1
            #define DECL_ZTESTMODE 1
            #define DECL_COLORMASK 1
            #define DECL_ALPHATOMASK 1
            #define DECL_OCCLUSIONSCALE 1
            #define DECL_GIBAKERMODE 1
            // ---- End build-in properties
            // ---- Begin build-in defines
            #define CONF_SHADER_BLOCK_COLOR_OUTPUT 1
            // ---- End build-in defines

            #ifdef VERTEX_INPUT_TEXCOORD1
                #undef VERTEX_INPUT_TEXCOORD1
                #define VERTEX_INPUT_TEXCOORD1 1
            #else
                #define VERTEX_INPUT_TEXCOORD1 1
            #endif

            #define CONF_SHADER_PASS SHADERPASS_META
            #define CONF_SHADER_PASS_INDEX 0
            #define CONF_SHADER_LOD SHADERLOD_LOD100

            #include "NPRStandard_Transmission_Matcap.cginc"
            #include "Packages/com.tencent.tmgp.yarp/Shaders/ShadingSystem/ShaderPass/ShaderPassMeta.cginc"

            ENDHLSL
        }

        Pass
        {
            name "SHADOWCASTER"
            Tags
            {
                "LightMode" = "ShadowCaster"
            }

            Cull [_Cull]

            HLSLPROGRAM

            #pragma vertex defaultVS
            #pragma fragment frag


            // ---- Begin build-in variants
            #pragma shader_feature __ _ALPHATEST_ON
            // ---- End build-in variants
            // ---- Begin material variants (NPRStandard_Transmission.cginc)
            #pragma multi_compile __ _ENABLEDISSOLVE_ON
            #pragma shader_feature _RIMSPACEMODE_NONE _RIMSPACEMODE_WORLD _RIMSPACEMODE_VIEW
            // ---- End material variants (NPRStandard_Transmission.cginc)

            // ---- Begin build-in properties
            half _Cull;
            static half _ZWrite = 0;
            static half _ZTestMode = 0;
            static half _ColorMask = 0;
            static half _AlphaToMask = 0;
            half _OcclusionScale;
            int _GIBakerMode;

            #define DECL_CULL 1
            #define DECL_ZWRITE 1
            #define DECL_ZTESTMODE 1
            #define DECL_COLORMASK 1
            #define DECL_ALPHATOMASK 1
            #define DECL_OCCLUSIONSCALE 1
            #define DECL_GIBAKERMODE 1
            // ---- End build-in properties
            // ---- Begin build-in defines
            #define CONF_SHADER_BLOCK_COLOR_OUTPUT 1
            // ---- End build-in defines

            #define CONF_SHADER_PASS SHADERPASS_SHADOW_CASTER
            #define CONF_SHADER_PASS_INDEX 0
            #define CONF_SHADER_LOD SHADERLOD_LOD100

            #include "NPRStandard_Transmission_Matcap.cginc"
            #include "Packages/com.tencent.tmgp.yarp/Shaders/ShadingSystem/ShaderPass/ShaderPassShadowCaster.cginc"

            ENDHLSL
        }

        Pass
        {
            name "FORWARDBASE"
            Tags
            {
                "LightMode" = "ForwardBase"
            }

            Cull [_Cull]
            ZWrite [_ZWrite]
            ZTest [_ZTestMode]
            Blend [_SrcBlend] [_DstBlend]
            Stencil
            {
                Ref [_StencilRef]
                Comp [_StencilComp]
                ReadMask [_StencilReadMask]
                WriteMask [_StencilWriteMask]
                Pass [_StencilPass]
                Fail [_StencilFail]
                ZFail [_StencilZFail]
            }

            HLSLPROGRAM

            #pragma vertex defaultVS
            #pragma fragment frag


            // ---- Begin build-in variants
            #pragma multi_compile __ YARP_EDITOR
            #pragma multi_compile __ _SHADOW_FILTER_FIXED_SIZE_1_TAP _SHADOW_FILTER_FIXED_SIZE_4_TAP
            #pragma multi_compile __ _USE_3D_VLM _USE_UNIFORM_LIGHTMAP _USE_DIRECTIONAL_LIGHTMAP _USE_LIGHT_PROBE _USE_VOLUMETRIC_LIGHTMAP
            #pragma multi_compile __ _USE_SHADOWMASK
            #pragma multi_compile __ _YARP_TWO_LIGHTS _YARP_THREE_LIGHTS
            #pragma shader_feature __ _ALPHATEST_ON
            #pragma shader_feature __ _VISIBILITY_ON
            // ---- End build-in variants
            // ---- Begin material variants (NPRStandard_Transmission.cginc)
            #pragma shader_feature __ _ANISOTROPY_ON
            #pragma shader_feature __ _ENABLERAMPTEX_ON
            #pragma multi_compile __ _ENABLEDISSOLVE_ON
            #pragma shader_feature _RIMSPACEMODE_NONE _RIMSPACEMODE_WORLD _RIMSPACEMODE_VIEW
            // ---- End material variants (NPRStandard_Transmission.cginc)

            // ---- Begin build-in properties
            half _Cull;
            half _ZWrite;
            half _ZTestMode;
            static half _ColorMask = 0;
            static half _AlphaToMask = 0;
            half _OcclusionScale;
            int _GIBakerMode;

            #define DECL_CULL 1
            #define DECL_ZWRITE 1
            #define DECL_ZTESTMODE 1
            #define DECL_COLORMASK 1
            #define DECL_ALPHATOMASK 1
            #define DECL_OCCLUSIONSCALE 1
            #define DECL_GIBAKERMODE 1
            // ---- End build-in properties
            // ---- Begin build-in defines
            #define _ENABLE_FOG 1
            #define CONF_SHADER_BLOCK_COLOR_OUTPUT 1
            // ---- End build-in defines

            #define CONF_SHADER_PASS SHADERPASS_FORWARD_BASE
            #define CONF_SHADER_PASS_INDEX 0
            #define CONF_SHADER_LOD SHADERLOD_LOD100

            #include "NPRStandard_Transmission_Matcap.cginc"
            #include "Packages/com.tencent.tmgp.yarp/Shaders/ShadingSystem/ShaderPass/ShaderPassForwardBase.cginc"

            ENDHLSL
        }

//        Pass
//        {
//            name "OUTLINE"
//            Tags
//            {
//                "LightMode" = "Outline"
//            }
//
//            Cull [_Cull]
//
//            HLSLPROGRAM
//
//            #pragma vertex defaultVS
//            #pragma fragment frag
//
//
//            // ---- Begin build-in variants
//            #pragma shader_feature __ _ALPHATEST_ON
//            #pragma shader_feature __ _VISIBILITY_ON
//            // ---- End build-in variants
//            // ---- Begin material variants (NPRStandard_Transmission.cginc)
//            #pragma shader_feature __ _HAS_OUTLINETEX_ON
//            #pragma multi_compile __ _ENABLEDISSOLVE_ON
//            #pragma shader_feature _RIMSPACEMODE_NONE _RIMSPACEMODE_WORLD _RIMSPACEMODE_VIEW
//            // ---- End material variants (NPRStandard_Transmission.cginc)
//
//            // ---- Begin build-in properties
//            half _Cull;
//            static half _ZWrite = 0;
//            static half _ZTestMode = 0;
//            static half _ColorMask = 0;
//            static half _AlphaToMask = 0;
//            half _OcclusionScale;
//            int _GIBakerMode;
//
//            #define DECL_CULL 1
//            #define DECL_ZWRITE 1
//            #define DECL_ZTESTMODE 1
//            #define DECL_COLORMASK 1
//            #define DECL_ALPHATOMASK 1
//            #define DECL_OCCLUSIONSCALE 1
//            #define DECL_GIBAKERMODE 1
//            // ---- End build-in properties
//            // ---- Begin build-in defines
//            #define CONF_SHADER_BLOCK_COLOR_OUTPUT 1
//            // ---- End build-in defines
//
//            #define CONF_SHADER_PASS SHADERPASS_OUTLINE
//            #define CONF_SHADER_PASS_INDEX 0
//            #define CONF_SHADER_LOD SHADERLOD_LOD100
//
//            #include "NPRStandard_Transmission_Matcap.cginc"
//            #include "Packages/com.tencent.tmgp.yarp/Shaders/ShadingSystem/ShaderPass/ShaderPassOutline.cginc"
//
//            ENDHLSL
//        }

        Pass
        {
            name "REFLECTION"
            Tags
            {
                "LightMode" = "Reflection"
            }

            Cull [_Cull]

            HLSLPROGRAM

            #pragma vertex defaultVS
            #pragma fragment frag


            // ---- Begin build-in variants
            #pragma shader_feature __ _ALPHATEST_ON
            // ---- End build-in variants
            // ---- Begin material variants (NPRStandard_Transmission.cginc)
            #pragma multi_compile __ _ENABLEDISSOLVE_ON
            #pragma shader_feature _RIMSPACEMODE_NONE _RIMSPACEMODE_WORLD _RIMSPACEMODE_VIEW
            // ---- End material variants (NPRStandard_Transmission.cginc)

            // ---- Begin build-in properties
            half _Cull;
            static half _ZWrite = 0;
            static half _ZTestMode = 0;
            static half _ColorMask = 0;
            static half _AlphaToMask = 0;
            half _OcclusionScale;
            int _GIBakerMode;

            #define DECL_CULL 1
            #define DECL_ZWRITE 1
            #define DECL_ZTESTMODE 1
            #define DECL_COLORMASK 1
            #define DECL_ALPHATOMASK 1
            #define DECL_OCCLUSIONSCALE 1
            #define DECL_GIBAKERMODE 1
            // ---- End build-in properties
            // ---- Begin build-in defines
            #define CONF_SHADER_BLOCK_COLOR_OUTPUT 1
            // ---- End build-in defines

            #define CONF_SHADER_PASS SHADERPASS_REFLECTION
            #define CONF_SHADER_PASS_INDEX 0
            #define CONF_SHADER_LOD SHADERLOD_LOD100

            #include "NPRStandard_Transmission_Matcap.cginc"
            #include "Packages/com.tencent.tmgp.yarp/Shaders/ShadingSystem/ShaderPass/ShaderPassReflection.cginc"

            ENDHLSL
        }

    }
    // ---- End SubShader Standard

    Fallback"Hidden/YARPErrorShader"
    CustomEditor "Yarp.ShaderMonkey.DefaultMaterialEditor"
}
